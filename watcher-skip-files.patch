diff --git i/google/appengine/tools/devappserver2/file_watcher.py w/google/appengine/tools/devappserver2/file_watcher.py
index e4ecea7..11904bc 100644
--- i/google/appengine/tools/devappserver2/file_watcher.py
+++ w/google/appengine/tools/devappserver2/file_watcher.py
@@ -28,8 +28,9 @@ from google.appengine.tools.devappserver2 import win32_file_watcher
 class _MultipleFileWatcher(object):
   """A FileWatcher than can watch many directories."""

-  def __init__(self, directories, use_mtime_file_watcher):
-    self._file_watchers = [get_file_watcher([directory], use_mtime_file_watcher)
+  def __init__(self, directories, use_mtime_file_watcher, skip_files):
+    self._file_watchers = [get_file_watcher(
+                              [directory], use_mtime_file_watcher, skip_files)
                            for directory in directories]

   def start(self):
@@ -50,7 +51,7 @@ class _MultipleFileWatcher(object):
     return has_changes


-def get_file_watcher(directories, use_mtime_file_watcher):
+def get_file_watcher(directories, use_mtime_file_watcher, skip_files):
   """Returns an instance that monitors a hierarchy of directories.

   Args:
@@ -58,6 +59,8 @@ def get_file_watcher(directories, use_mtime_file_watcher):
     use_mtime_file_watcher: A bool containing whether to use mtime polling to
         monitor file changes even if other options are available on the current
         platform.
+    skip_files: An re object. Files that match this regular expression will not
+        be watched. Currently only supported by MtimeFileWatcher.

   Returns:
     A FileWatcher appropriate for the current platform. start() must be called
@@ -65,16 +68,16 @@ def get_file_watcher(directories, use_mtime_file_watcher):
   """
   assert not isinstance(directories, types.StringTypes), 'expected list got str'
   if len(directories) != 1:
-    return _MultipleFileWatcher(directories, use_mtime_file_watcher)
+    return _MultipleFileWatcher(directories, use_mtime_file_watcher, skip_files)

   directory = directories[0]
   if use_mtime_file_watcher:
-    return mtime_file_watcher.MtimeFileWatcher(directory)
+    return mtime_file_watcher.MtimeFileWatcher(directory, skip_files)
   elif sys.platform.startswith('linux'):
     return inotify_file_watcher.InotifyFileWatcher(directory)
   elif sys.platform.startswith('win'):
     return win32_file_watcher.Win32FileWatcher(directory)
-  return mtime_file_watcher.MtimeFileWatcher(directory)
+  return mtime_file_watcher.MtimeFileWatcher(directory, skip_files)

   # NOTE: The Darwin-specific watcher implementation (found in the deleted file
   # fsevents_file_watcher.py) was incorrect - the Mac OS X FSEvents
diff --git i/google/appengine/tools/devappserver2/module.py w/google/appengine/tools/devappserver2/module.py
index 90bf85f..55b854e 100644
--- i/google/appengine/tools/devappserver2/module.py
+++ w/google/appengine/tools/devappserver2/module.py
@@ -420,7 +420,8 @@ class Module(object):
       self._watcher = file_watcher.get_file_watcher(
           [self._module_configuration.application_root] +
           self._instance_factory.get_restart_directories(),
-          self._use_mtime_file_watcher)
+          self._use_mtime_file_watcher,
+          self._module_configuration.skip_files)
     else:
       self._watcher = None
     self._handler_lock = threading.Lock()
diff --git i/google/appengine/tools/devappserver2/mtime_file_watcher.py w/google/appengine/tools/devappserver2/mtime_file_watcher.py
index 6a62512..ea09837 100644
--- i/google/appengine/tools/devappserver2/mtime_file_watcher.py
+++ w/google/appengine/tools/devappserver2/mtime_file_watcher.py
@@ -24,8 +24,9 @@ import warnings
 class MtimeFileWatcher(object):
   """Monitors a directory tree for changes using mtime polling."""

-  def __init__(self, directory):
+  def __init__(self, directory, skip_files):
     self._directory = directory
+    self._skip_files = skip_files
     self._quit_event = threading.Event()
     self._filename_to_mtime = None
     self._has_changes = False
@@ -77,6 +78,10 @@ class MtimeFileWatcher(object):
     for dirname, dirnames, filenames in os.walk(self._directory,
                                                 followlinks=True):
       for filename in filenames + dirnames:
+        rel_path = os.path.relpath(os.path.join(dirname, filename),
+                                      self._directory)
+        if self._skip_files.match(rel_path):
+          continue
         if num_files == 10000:
           warnings.warn(
               'There are too many files in your application for '
