From 111440a932be8da2c8c62c6916617a995403c985 Mon Sep 17 00:00:00 2001
From: Chris Klaiber <chris@khanacademy.org>
Date: Thu, 19 Sep 2013 15:43:13 -0700
Subject: [PATCH 1/1] Reintroduce fsevents_file_watcher.py

This patch makes fsevents_file_watcher the default again on Mac. It was
removed in the 1.8.x SDK versions. To use the mtime_file_watcher
instead, invoke "dev_appserver.py --use_mtime_file_watcher=yes"

You will need pyobjc installed to use the fsevents file watcher. Running
"pip install pyobjc" should do the trick.

The old file watcher was resurrected from version control at
https://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/tools/devappserver2/fsevents_file_watcher.py?r=318

It's easiest to apply this patch using `git am <this.patch` or `patch
-p1 <this.patch` after having already applied watcher-skip-files.patch
---
 .../appengine/tools/devappserver2/file_watcher.py  |  13 +++
 .../tools/devappserver2/fsevents_file_watcher.py   | 100 +++++++++++++++++++++
 2 files changed, 113 insertions(+)
 create mode 100644 google/appengine/tools/devappserver2/fsevents_file_watcher.py

diff --git a/google/appengine/tools/devappserver2/file_watcher.py b/google/appengine/tools/devappserver2/file_watcher.py
index 11904bc..44f1992 100644
--- a/google/appengine/tools/devappserver2/file_watcher.py
+++ b/google/appengine/tools/devappserver2/file_watcher.py
@@ -19,7 +19,10 @@
 
 import sys
 import types
+import warnings
 
+
+from google.appengine.tools.devappserver2 import fsevents_file_watcher
 from google.appengine.tools.devappserver2 import inotify_file_watcher
 from google.appengine.tools.devappserver2 import mtime_file_watcher
 from google.appengine.tools.devappserver2 import win32_file_watcher
@@ -77,6 +80,16 @@ def get_file_watcher(directories, use_mtime_file_watcher, skip_files):
     return inotify_file_watcher.InotifyFileWatcher(directory)
   elif sys.platform.startswith('win'):
     return win32_file_watcher.Win32FileWatcher(directory)
+  elif sys.platform.startswith('darwin'):
+    if fsevents_file_watcher.FSEventsFileWatcher.is_available():
+      return fsevents_file_watcher.FSEventsFileWatcher(directory)
+    else:
+      warnings.warn('Detecting source code changes is not supported because '
+                    'your Python version does not include PyObjC '
+                    '(http://pyobjc.sourceforge.net/). Please install PyObjC '
+                    'or, if that is not practical, file a bug at '
+                    'http://code.google.com/p/'
+                    'appengine-devappserver2-experiment/issues/list.')
   return mtime_file_watcher.MtimeFileWatcher(directory, skip_files)
 
   # NOTE: The Darwin-specific watcher implementation (found in the deleted file
diff --git a/google/appengine/tools/devappserver2/fsevents_file_watcher.py b/google/appengine/tools/devappserver2/fsevents_file_watcher.py
new file mode 100644
index 0000000..65c2798
--- /dev/null
+++ b/google/appengine/tools/devappserver2/fsevents_file_watcher.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python
+#
+# Copyright 2007 Google Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+"""Monitors a directory tree for changes using the Mac OS X FSEvents API."""
+
+
+import os.path
+import threading
+
+try:
+  import AppKit
+  import FSEvents
+except ImportError:
+  AppKit = None
+  FSEvents = None
+
+
+class FSEventsFileWatcher(object):
+  """Monitors a directory tree for changes using FSEVents."""
+
+  def __init__(self, directory):
+    """Initializer for FSEventsFileWatcher.
+
+    Args:
+      directory: A string representing the path to a directory that should
+          be monitored for changes i.e. files and directories added, renamed,
+          deleted or changed.
+    """
+    self._directory = os.path.abspath(directory)
+    self._has_changes = None
+    self._quit_event = threading.Event()
+    self._event_watcher_thread = threading.Thread(target=self._watch_changes)
+
+  @staticmethod
+  def is_available():
+    return FSEvents is not None
+
+  def _fsevents_callback(self, *unused_args):
+    self._has_changes = True
+
+  def _watch_changes(self):
+    # Do the file watching in a thread to ensure that
+    # FSEventStreamScheduleWithRunLoop and CFRunLoopRunInMode are called in the
+    # same thread.
+
+    # Each thread needs its own AutoreleasePool.
+    pool = AppKit.NSAutoreleasePool.alloc().init()
+    event_stream = FSEvents.FSEventStreamCreate(
+        None,
+        self._fsevents_callback,
+        None,
+        [self._directory],
+        FSEvents.kFSEventStreamEventIdSinceNow,
+        1,  # Seconds to wait to between received events.
+        FSEvents.kFSEventStreamCreateFlagNone,
+        )
+
+    FSEvents.FSEventStreamScheduleWithRunLoop(event_stream,
+                                              FSEvents.CFRunLoopGetCurrent(),
+                                              FSEvents.kCFRunLoopDefaultMode)
+
+    assert FSEvents.FSEventStreamStart(event_stream), (
+        'event stream could not be started')
+    while not self._quit_event.is_set():
+      FSEvents.CFRunLoopRunInMode(FSEvents.kCFRunLoopDefaultMode,
+                                  0.1,    # seconds
+                                  False)  # returnAfterSourceHandled
+
+    FSEvents.FSEventStreamRelease(event_stream)
+    del pool  # del is recommended by the PyObjc programming guide.
+
+  def start(self):
+    """Start watching the directory for changes."""
+    self._has_changes = False
+    self._event_watcher_thread.start()
+
+  def quit(self):
+    """Stop watching the directory for changes."""
+    self._quit_event.set()
+
+  def has_changes(self):
+    assert self._event_watcher_thread.is_alive(), (
+        'watcher thread exited or was not started')
+    try:
+      return self._has_changes
+    finally:
+      self._has_changes = False
-- 
1.8.0

